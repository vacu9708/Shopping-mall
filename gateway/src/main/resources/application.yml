spring:
  cloud:
    gateway:
      routes:
      - id: order_management
        uri: http://${orderManagement:localhost}:8081
        predicates:
        - Path=/orderManagement/**
        filters:
        - RewritePath=/orderManagement/(?<path>.*), /$\{path}
        - name: CircuitBreaker
          args:
            fallbackUri: forward:/fallback
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1
            redis-rate-limiter.burstCapacity: 2
      - id: user_management
        uri: http://${userManagement:localhost}:8082
        predicates:
        - Path=/userManagement/**
        filters:
        - RewritePath=/userManagement/(?<path>.*), /$\{path}
        - name: CircuitBreaker
          args:
            fallbackUri: forward:/fallback
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1
            redis-rate-limiter.burstCapacity: 2
      - id: productManagement
        uri: http://${productManagement:localhost}:8083
        predicates:
        - Path=/productManagement/**
        filters:
        - RewritePath=/productManagement/(?<path>.*), /$\{path}
        - name: CircuitBreaker
          args:
            fallbackUri: forward:/fallback
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1
            redis-rate-limiter.burstCapacity: 2
      # notification service with circuit breaker
      - id: notification
        uri: http://${notification:localhost}:8084
        predicates:
        - Path=/notification/**
        filters:
        - RewritePath=/notification/(?<path>.*), /$\{path}
        - name: CircuitBreaker
          args:
            fallbackUri: forward:/fallback
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 1
            redis-rate-limiter.burstCapacity: 2

# resilience4j.circuitbreaker:
#     configs:
#         default:
#             registerHealthIndicator: true
#             slidingWindowSize: 50

# resilience4j.timelimiter:
#     configs:
#         default:
#             timeoutDuration: 10s
#             cancelRunningFuture: true
