version: '3'
# name: shoppingmall # name does not work in Jenkins
services:
  # Kafka/Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  mySql:
    image: mysql:8
    container_name: mySql
    # restart: always
    environment:
      MYSQL_DATABASE: 'root' # you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: '123' # You can use whatever password you like
      MYSQL_ROOT_PASSWORD: '123' # Password for root access
    ports:
      - '3306:3306'
    expose:
      - '3306'
    # Where our data will be persisted
    volumes:
      - /mysql_data:/mysql_data
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --appendonly yes
    # command: ["redis-server", "--bind", "redis", "--port", "6379"]
    ports:
      - '6379:6379'
    expose:
      - '6379'
    volumes:
      - '/redis_data:/redis_data'
    networks:
      - myNetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 3

  gateway:
    build:
      context: ../gateway
      dockerfile: Dockerfile
    image: gateway:gateway
    container_name: gateway
    ports:
      - 8080:8080
    extra_hosts:
      - "localhost:host-gateway"

  order_management:
    build:
      context: ../order_management
      dockerfile: Dockerfile
    image: order_management:order_management
    container_name: order_management
    ports:
      - 8081:8081
    depends_on:
      mySql:
        condition: service_healthy
    extra_hosts:
      - "localhost:host-gateway"

  user_management:
    build:
      context: ../user_management
      dockerfile: Dockerfile
    image: user_management:user_management
    container_name: user_management
    ports:
      - 8082:8082
    extra_hosts:
      - "localhost:host-gateway"
    depends_on:
      mySql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - myNetwork

  product_management:
    build:
      context: ../product_management
      dockerfile: Dockerfile
    image: product_management:product_management
    container_name: product_management
    ports:
      - 8083:8083
    depends_on:
      mySql:
        condition: service_healthy
    extra_hosts:
      - "localhost:host-gateway"

  notification:
    build:
      context: ../notification
      dockerfile: Dockerfile
    image: notification:notification
    container_name: notification
    ports:
      - 8084:8084
    depends_on:
      mySql:
        condition: service_healthy
    extra_hosts:
      - "localhost:host-gateway"

networks:
  myNetwork:
    driver: bridge